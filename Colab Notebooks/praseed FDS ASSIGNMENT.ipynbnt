{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1RC-0cJRZpNlqRhYF7pv35BtHRbjWWW-h","timestamp":1676432517650}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8tYLaeOjSsZF","executionInfo":{"status":"ok","timestamp":1676132760377,"user_tz":0,"elapsed":7,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"cfbc4d06-f8d7-461a-9ae1-d878e83aa719"},"outputs":[{"output_type":"stream","name":"stdout","text":["1.21.6\n"]}],"source":["'''\n","Print the numpy version and the configuration\n","'''\n","import numpy\n","print(numpy.__version__)"]},{"cell_type":"code","source":["'''Create a null vector of size 10\n","'''\n","import numpy as np\n","\n","null_vector = np.zeros(10)\n","print(null_vector)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xn2kbxFxTFWG","executionInfo":{"status":"ok","timestamp":1676132791338,"user_tz":0,"elapsed":3,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"eff9bd85-ad0d-4b7f-8ec8-5ce55346a1ec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"]}]},{"cell_type":"code","source":["'''How to find the memory size of any array'''\n","import numpy as np\n","\n","a = np.array([1, 2, 3, 4, 5])\n","print(\"Memory size of the array:\", a.nbytes, \"bytes\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lYzUy6gkTLTw","executionInfo":{"status":"ok","timestamp":1676132840064,"user_tz":0,"elapsed":604,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"7f49114d-8899-4361-9813-79f35d2fd903"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Memory size of the array: 40 bytes\n"]}]},{"cell_type":"code","source":["'''How to get the documentation of the numpy add function from the \n","command line?'''\n","import numpy as np\n","help(np.add)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vfwUaGWITXwi","executionInfo":{"status":"ok","timestamp":1676132905843,"user_tz":0,"elapsed":678,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"34a22ead-225a-42bf-886b-96ea681b6f66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on ufunc object:\n","\n","add = class ufunc(builtins.object)\n"," |  Functions that operate element by element on whole arrays.\n"," |  \n"," |  To see the documentation for a specific ufunc, use `info`.  For\n"," |  example, ``np.info(np.sin)``.  Because ufuncs are written in C\n"," |  (for speed) and linked into Python with NumPy's ufunc facility,\n"," |  Python's help() function finds this page whenever help() is called\n"," |  on a ufunc.\n"," |  \n"," |  A detailed explanation of ufuncs can be found in the docs for :ref:`ufuncs`.\n"," |  \n"," |  **Calling ufuncs:** ``op(*x[, out], where=True, **kwargs)``\n"," |  \n"," |  Apply `op` to the arguments `*x` elementwise, broadcasting the arguments.\n"," |  \n"," |  The broadcasting rules are:\n"," |  \n"," |  * Dimensions of length 1 may be prepended to either array.\n"," |  * Arrays may be repeated along dimensions of length 1.\n"," |  \n"," |  Parameters\n"," |  ----------\n"," |  *x : array_like\n"," |      Input arrays.\n"," |  out : ndarray, None, or tuple of ndarray and None, optional\n"," |      Alternate array object(s) in which to put the result; if provided, it\n"," |      must have a shape that the inputs broadcast to. A tuple of arrays\n"," |      (possible only as a keyword argument) must have length equal to the\n"," |      number of outputs; use None for uninitialized outputs to be\n"," |      allocated by the ufunc.\n"," |  where : array_like, optional\n"," |      This condition is broadcast over the input. At locations where the\n"," |      condition is True, the `out` array will be set to the ufunc result.\n"," |      Elsewhere, the `out` array will retain its original value.\n"," |      Note that if an uninitialized `out` array is created via the default\n"," |      ``out=None``, locations within it where the condition is False will\n"," |      remain uninitialized.\n"," |  **kwargs\n"," |      For other keyword-only arguments, see the :ref:`ufunc docs <ufuncs.kwargs>`.\n"," |  \n"," |  Returns\n"," |  -------\n"," |  r : ndarray or tuple of ndarray\n"," |      `r` will have the shape that the arrays in `x` broadcast to; if `out` is\n"," |      provided, it will be returned. If not, `r` will be allocated and\n"," |      may contain uninitialized values. If the function has more than one\n"," |      output, then the result will be a tuple of arrays.\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __call__(self, /, *args, **kwargs)\n"," |      Call self as a function.\n"," |  \n"," |  __repr__(self, /)\n"," |      Return repr(self).\n"," |  \n"," |  __str__(self, /)\n"," |      Return str(self).\n"," |  \n"," |  accumulate(...)\n"," |      accumulate(array, axis=0, dtype=None, out=None)\n"," |      \n"," |      Accumulate the result of applying the operator to all elements.\n"," |      \n"," |      For a one-dimensional array, accumulate produces results equivalent to::\n"," |      \n"," |        r = np.empty(len(A))\n"," |        t = op.identity        # op = the ufunc being applied to A's  elements\n"," |        for i in range(len(A)):\n"," |            t = op(t, A[i])\n"," |            r[i] = t\n"," |        return r\n"," |      \n"," |      For example, add.accumulate() is equivalent to np.cumsum().\n"," |      \n"," |      For a multi-dimensional array, accumulate is applied along only one\n"," |      axis (axis zero by default; see Examples below) so repeated use is\n"," |      necessary if one wants to accumulate over multiple axes.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      array : array_like\n"," |          The array to act on.\n"," |      axis : int, optional\n"," |          The axis along which to apply the accumulation; default is zero.\n"," |      dtype : data-type code, optional\n"," |          The data-type used to represent the intermediate results. Defaults\n"," |          to the data-type of the output array if such is provided, or the\n"," |          the data-type of the input array if no output array is provided.\n"," |      out : ndarray, None, or tuple of ndarray and None, optional\n"," |          A location into which the result is stored. If not provided or None,\n"," |          a freshly-allocated array is returned. For consistency with\n"," |          ``ufunc.__call__``, if given as a keyword, this may be wrapped in a\n"," |          1-element tuple.\n"," |      \n"," |          .. versionchanged:: 1.13.0\n"," |             Tuples are allowed for keyword argument.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      r : ndarray\n"," |          The accumulated values. If `out` was supplied, `r` is a reference to\n"," |          `out`.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      1-D array examples:\n"," |      \n"," |      >>> np.add.accumulate([2, 3, 5])\n"," |      array([ 2,  5, 10])\n"," |      >>> np.multiply.accumulate([2, 3, 5])\n"," |      array([ 2,  6, 30])\n"," |      \n"," |      2-D array examples:\n"," |      \n"," |      >>> I = np.eye(2)\n"," |      >>> I\n"," |      array([[1.,  0.],\n"," |             [0.,  1.]])\n"," |      \n"," |      Accumulate along axis 0 (rows), down columns:\n"," |      \n"," |      >>> np.add.accumulate(I, 0)\n"," |      array([[1.,  0.],\n"," |             [1.,  1.]])\n"," |      >>> np.add.accumulate(I) # no axis specified = axis zero\n"," |      array([[1.,  0.],\n"," |             [1.,  1.]])\n"," |      \n"," |      Accumulate along axis 1 (columns), through rows:\n"," |      \n"," |      >>> np.add.accumulate(I, 1)\n"," |      array([[1.,  1.],\n"," |             [0.,  1.]])\n"," |  \n"," |  at(...)\n"," |      at(a, indices, b=None, /)\n"," |      \n"," |      Performs unbuffered in place operation on operand 'a' for elements\n"," |      specified by 'indices'. For addition ufunc, this method is equivalent to\n"," |      ``a[indices] += b``, except that results are accumulated for elements that\n"," |      are indexed more than once. For example, ``a[[0,0]] += 1`` will only\n"," |      increment the first element once because of buffering, whereas\n"," |      ``add.at(a, [0,0], 1)`` will increment the first element twice.\n"," |      \n"," |      .. versionadded:: 1.8.0\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      a : array_like\n"," |          The array to perform in place operation on.\n"," |      indices : array_like or tuple\n"," |          Array like index object or slice object for indexing into first\n"," |          operand. If first operand has multiple dimensions, indices can be a\n"," |          tuple of array like index objects or slice objects.\n"," |      b : array_like\n"," |          Second operand for ufuncs requiring two operands. Operand must be\n"," |          broadcastable over first operand after indexing or slicing.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      Set items 0 and 1 to their negative values:\n"," |      \n"," |      >>> a = np.array([1, 2, 3, 4])\n"," |      >>> np.negative.at(a, [0, 1])\n"," |      >>> a\n"," |      array([-1, -2,  3,  4])\n"," |      \n"," |      Increment items 0 and 1, and increment item 2 twice:\n"," |      \n"," |      >>> a = np.array([1, 2, 3, 4])\n"," |      >>> np.add.at(a, [0, 1, 2, 2], 1)\n"," |      >>> a\n"," |      array([2, 3, 5, 4])\n"," |      \n"," |      Add items 0 and 1 in first array to second array,\n"," |      and store results in first array:\n"," |      \n"," |      >>> a = np.array([1, 2, 3, 4])\n"," |      >>> b = np.array([1, 2])\n"," |      >>> np.add.at(a, [0, 1], b)\n"," |      >>> a\n"," |      array([2, 4, 3, 4])\n"," |  \n"," |  outer(...)\n"," |      outer(A, B, /, **kwargs)\n"," |      \n"," |      Apply the ufunc `op` to all pairs (a, b) with a in `A` and b in `B`.\n"," |      \n"," |      Let ``M = A.ndim``, ``N = B.ndim``. Then the result, `C`, of\n"," |      ``op.outer(A, B)`` is an array of dimension M + N such that:\n"," |      \n"," |      .. math:: C[i_0, ..., i_{M-1}, j_0, ..., j_{N-1}] =\n"," |         op(A[i_0, ..., i_{M-1}], B[j_0, ..., j_{N-1}])\n"," |      \n"," |      For `A` and `B` one-dimensional, this is equivalent to::\n"," |      \n"," |        r = empty(len(A),len(B))\n"," |        for i in range(len(A)):\n"," |            for j in range(len(B)):\n"," |                r[i,j] = op(A[i], B[j])  # op = ufunc in question\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      A : array_like\n"," |          First array\n"," |      B : array_like\n"," |          Second array\n"," |      kwargs : any\n"," |          Arguments to pass on to the ufunc. Typically `dtype` or `out`.\n"," |          See `ufunc` for a comprehensive overview of all available arguments.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      r : ndarray\n"," |          Output array\n"," |      \n"," |      See Also\n"," |      --------\n"," |      numpy.outer : A less powerful version of ``np.multiply.outer``\n"," |                    that `ravel`\\ s all inputs to 1D. This exists\n"," |                    primarily for compatibility with old code.\n"," |      \n"," |      tensordot : ``np.tensordot(a, b, axes=((), ()))`` and\n"," |                  ``np.multiply.outer(a, b)`` behave same for all\n"," |                  dimensions of a and b.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.multiply.outer([1, 2, 3], [4, 5, 6])\n"," |      array([[ 4,  5,  6],\n"," |             [ 8, 10, 12],\n"," |             [12, 15, 18]])\n"," |      \n"," |      A multi-dimensional example:\n"," |      \n"," |      >>> A = np.array([[1, 2, 3], [4, 5, 6]])\n"," |      >>> A.shape\n"," |      (2, 3)\n"," |      >>> B = np.array([[1, 2, 3, 4]])\n"," |      >>> B.shape\n"," |      (1, 4)\n"," |      >>> C = np.multiply.outer(A, B)\n"," |      >>> C.shape; C\n"," |      (2, 3, 1, 4)\n"," |      array([[[[ 1,  2,  3,  4]],\n"," |              [[ 2,  4,  6,  8]],\n"," |              [[ 3,  6,  9, 12]]],\n"," |             [[[ 4,  8, 12, 16]],\n"," |              [[ 5, 10, 15, 20]],\n"," |              [[ 6, 12, 18, 24]]]])\n"," |  \n"," |  reduce(...)\n"," |      reduce(array, axis=0, dtype=None, out=None, keepdims=False, initial=<no value>, where=True)\n"," |      \n"," |      Reduces `array`'s dimension by one, by applying ufunc along one axis.\n"," |      \n"," |      Let :math:`array.shape = (N_0, ..., N_i, ..., N_{M-1})`.  Then\n"," |      :math:`ufunc.reduce(array, axis=i)[k_0, ..,k_{i-1}, k_{i+1}, .., k_{M-1}]` =\n"," |      the result of iterating `j` over :math:`range(N_i)`, cumulatively applying\n"," |      ufunc to each :math:`array[k_0, ..,k_{i-1}, j, k_{i+1}, .., k_{M-1}]`.\n"," |      For a one-dimensional array, reduce produces results equivalent to:\n"," |      ::\n"," |      \n"," |       r = op.identity # op = ufunc\n"," |       for i in range(len(A)):\n"," |         r = op(r, A[i])\n"," |       return r\n"," |      \n"," |      For example, add.reduce() is equivalent to sum().\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      array : array_like\n"," |          The array to act on.\n"," |      axis : None or int or tuple of ints, optional\n"," |          Axis or axes along which a reduction is performed.\n"," |          The default (`axis` = 0) is perform a reduction over the first\n"," |          dimension of the input array. `axis` may be negative, in\n"," |          which case it counts from the last to the first axis.\n"," |      \n"," |          .. versionadded:: 1.7.0\n"," |      \n"," |          If this is None, a reduction is performed over all the axes.\n"," |          If this is a tuple of ints, a reduction is performed on multiple\n"," |          axes, instead of a single axis or all the axes as before.\n"," |      \n"," |          For operations which are either not commutative or not associative,\n"," |          doing a reduction over multiple axes is not well-defined. The\n"," |          ufuncs do not currently raise an exception in this case, but will\n"," |          likely do so in the future.\n"," |      dtype : data-type code, optional\n"," |          The type used to represent the intermediate results. Defaults\n"," |          to the data-type of the output array if this is provided, or\n"," |          the data-type of the input array if no output array is provided.\n"," |      out : ndarray, None, or tuple of ndarray and None, optional\n"," |          A location into which the result is stored. If not provided or None,\n"," |          a freshly-allocated array is returned. For consistency with\n"," |          ``ufunc.__call__``, if given as a keyword, this may be wrapped in a\n"," |          1-element tuple.\n"," |      \n"," |          .. versionchanged:: 1.13.0\n"," |             Tuples are allowed for keyword argument.\n"," |      keepdims : bool, optional\n"," |          If this is set to True, the axes which are reduced are left\n"," |          in the result as dimensions with size one. With this option,\n"," |          the result will broadcast correctly against the original `array`.\n"," |      \n"," |          .. versionadded:: 1.7.0\n"," |      initial : scalar, optional\n"," |          The value with which to start the reduction.\n"," |          If the ufunc has no identity or the dtype is object, this defaults\n"," |          to None - otherwise it defaults to ufunc.identity.\n"," |          If ``None`` is given, the first element of the reduction is used,\n"," |          and an error is thrown if the reduction is empty.\n"," |      \n"," |          .. versionadded:: 1.15.0\n"," |      \n"," |      where : array_like of bool, optional\n"," |          A boolean array which is broadcasted to match the dimensions\n"," |          of `array`, and selects elements to include in the reduction. Note\n"," |          that for ufuncs like ``minimum`` that do not have an identity\n"," |          defined, one has to pass in also ``initial``.\n"," |      \n"," |          .. versionadded:: 1.17.0\n"," |      \n"," |      Returns\n"," |      -------\n"," |      r : ndarray\n"," |          The reduced array. If `out` was supplied, `r` is a reference to it.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.multiply.reduce([2,3,5])\n"," |      30\n"," |      \n"," |      A multi-dimensional array example:\n"," |      \n"," |      >>> X = np.arange(8).reshape((2,2,2))\n"," |      >>> X\n"," |      array([[[0, 1],\n"," |              [2, 3]],\n"," |             [[4, 5],\n"," |              [6, 7]]])\n"," |      >>> np.add.reduce(X, 0)\n"," |      array([[ 4,  6],\n"," |             [ 8, 10]])\n"," |      >>> np.add.reduce(X) # confirm: default axis value is 0\n"," |      array([[ 4,  6],\n"," |             [ 8, 10]])\n"," |      >>> np.add.reduce(X, 1)\n"," |      array([[ 2,  4],\n"," |             [10, 12]])\n"," |      >>> np.add.reduce(X, 2)\n"," |      array([[ 1,  5],\n"," |             [ 9, 13]])\n"," |      \n"," |      You can use the ``initial`` keyword argument to initialize the reduction\n"," |      with a different value, and ``where`` to select specific elements to include:\n"," |      \n"," |      >>> np.add.reduce([10], initial=5)\n"," |      15\n"," |      >>> np.add.reduce(np.ones((2, 2, 2)), axis=(0, 2), initial=10)\n"," |      array([14., 14.])\n"," |      >>> a = np.array([10., np.nan, 10])\n"," |      >>> np.add.reduce(a, where=~np.isnan(a))\n"," |      20.0\n"," |      \n"," |      Allows reductions of empty arrays where they would normally fail, i.e.\n"," |      for ufuncs without an identity.\n"," |      \n"," |      >>> np.minimum.reduce([], initial=np.inf)\n"," |      inf\n"," |      >>> np.minimum.reduce([[1., 2.], [3., 4.]], initial=10., where=[True, False])\n"," |      array([ 1., 10.])\n"," |      >>> np.minimum.reduce([])\n"," |      Traceback (most recent call last):\n"," |          ...\n"," |      ValueError: zero-size array to reduction operation minimum which has no identity\n"," |  \n"," |  reduceat(...)\n"," |      reduceat(array, indices, axis=0, dtype=None, out=None)\n"," |      \n"," |      Performs a (local) reduce with specified slices over a single axis.\n"," |      \n"," |      For i in ``range(len(indices))``, `reduceat` computes\n"," |      ``ufunc.reduce(array[indices[i]:indices[i+1]])``, which becomes the i-th\n"," |      generalized \"row\" parallel to `axis` in the final result (i.e., in a\n"," |      2-D array, for example, if `axis = 0`, it becomes the i-th row, but if\n"," |      `axis = 1`, it becomes the i-th column).  There are three exceptions to this:\n"," |      \n"," |      * when ``i = len(indices) - 1`` (so for the last index),\n"," |        ``indices[i+1] = array.shape[axis]``.\n"," |      * if ``indices[i] >= indices[i + 1]``, the i-th generalized \"row\" is\n"," |        simply ``array[indices[i]]``.\n"," |      * if ``indices[i] >= len(array)`` or ``indices[i] < 0``, an error is raised.\n"," |      \n"," |      The shape of the output depends on the size of `indices`, and may be\n"," |      larger than `array` (this happens if ``len(indices) > array.shape[axis]``).\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      array : array_like\n"," |          The array to act on.\n"," |      indices : array_like\n"," |          Paired indices, comma separated (not colon), specifying slices to\n"," |          reduce.\n"," |      axis : int, optional\n"," |          The axis along which to apply the reduceat.\n"," |      dtype : data-type code, optional\n"," |          The type used to represent the intermediate results. Defaults\n"," |          to the data type of the output array if this is provided, or\n"," |          the data type of the input array if no output array is provided.\n"," |      out : ndarray, None, or tuple of ndarray and None, optional\n"," |          A location into which the result is stored. If not provided or None,\n"," |          a freshly-allocated array is returned. For consistency with\n"," |          ``ufunc.__call__``, if given as a keyword, this may be wrapped in a\n"," |          1-element tuple.\n"," |      \n"," |          .. versionchanged:: 1.13.0\n"," |             Tuples are allowed for keyword argument.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      r : ndarray\n"," |          The reduced values. If `out` was supplied, `r` is a reference to\n"," |          `out`.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      A descriptive example:\n"," |      \n"," |      If `array` is 1-D, the function `ufunc.accumulate(array)` is the same as\n"," |      ``ufunc.reduceat(array, indices)[::2]`` where `indices` is\n"," |      ``range(len(array) - 1)`` with a zero placed\n"," |      in every other element:\n"," |      ``indices = zeros(2 * len(array) - 1)``,\n"," |      ``indices[1::2] = range(1, len(array))``.\n"," |      \n"," |      Don't be fooled by this attribute's name: `reduceat(array)` is not\n"," |      necessarily smaller than `array`.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      To take the running sum of four successive values:\n"," |      \n"," |      >>> np.add.reduceat(np.arange(8),[0,4, 1,5, 2,6, 3,7])[::2]\n"," |      array([ 6, 10, 14, 18])\n"," |      \n"," |      A 2-D example:\n"," |      \n"," |      >>> x = np.linspace(0, 15, 16).reshape(4,4)\n"," |      >>> x\n"," |      array([[ 0.,   1.,   2.,   3.],\n"," |             [ 4.,   5.,   6.,   7.],\n"," |             [ 8.,   9.,  10.,  11.],\n"," |             [12.,  13.,  14.,  15.]])\n"," |      \n"," |      ::\n"," |      \n"," |       # reduce such that the result has the following five rows:\n"," |       # [row1 + row2 + row3]\n"," |       # [row4]\n"," |       # [row2]\n"," |       # [row3]\n"," |       # [row1 + row2 + row3 + row4]\n"," |      \n"," |      >>> np.add.reduceat(x, [0, 3, 1, 2, 0])\n"," |      array([[12.,  15.,  18.,  21.],\n"," |             [12.,  13.,  14.,  15.],\n"," |             [ 4.,   5.,   6.,   7.],\n"," |             [ 8.,   9.,  10.,  11.],\n"," |             [24.,  28.,  32.,  36.]])\n"," |      \n"," |      ::\n"," |      \n"," |       # reduce such that result has the following two columns:\n"," |       # [col1 * col2 * col3, col4]\n"," |      \n"," |      >>> np.multiply.reduceat(x, [0, 3], 1)\n"," |      array([[   0.,     3.],\n"," |             [ 120.,     7.],\n"," |             [ 720.,    11.],\n"," |             [2184.,    15.]])\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors defined here:\n"," |  \n"," |  identity\n"," |      The identity value.\n"," |      \n"," |      Data attribute containing the identity element for the ufunc, if it has one.\n"," |      If it does not, the attribute value is None.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.add.identity\n"," |      0\n"," |      >>> np.multiply.identity\n"," |      1\n"," |      >>> np.power.identity\n"," |      1\n"," |      >>> print(np.exp.identity)\n"," |      None\n"," |  \n"," |  nargs\n"," |      The number of arguments.\n"," |      \n"," |      Data attribute containing the number of arguments the ufunc takes, including\n"," |      optional ones.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      Typically this value will be one more than what you might expect because all\n"," |      ufuncs take  the optional \"out\" argument.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.add.nargs\n"," |      3\n"," |      >>> np.multiply.nargs\n"," |      3\n"," |      >>> np.power.nargs\n"," |      3\n"," |      >>> np.exp.nargs\n"," |      2\n"," |  \n"," |  nin\n"," |      The number of inputs.\n"," |      \n"," |      Data attribute containing the number of arguments the ufunc treats as input.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.add.nin\n"," |      2\n"," |      >>> np.multiply.nin\n"," |      2\n"," |      >>> np.power.nin\n"," |      2\n"," |      >>> np.exp.nin\n"," |      1\n"," |  \n"," |  nout\n"," |      The number of outputs.\n"," |      \n"," |      Data attribute containing the number of arguments the ufunc treats as output.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      Since all ufuncs can take output arguments, this will always be (at least) 1.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.add.nout\n"," |      1\n"," |      >>> np.multiply.nout\n"," |      1\n"," |      >>> np.power.nout\n"," |      1\n"," |      >>> np.exp.nout\n"," |      1\n"," |  \n"," |  ntypes\n"," |      The number of types.\n"," |      \n"," |      The number of numerical NumPy types - of which there are 18 total - on which\n"," |      the ufunc can operate.\n"," |      \n"," |      See Also\n"," |      --------\n"," |      numpy.ufunc.types\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.add.ntypes\n"," |      18\n"," |      >>> np.multiply.ntypes\n"," |      18\n"," |      >>> np.power.ntypes\n"," |      17\n"," |      >>> np.exp.ntypes\n"," |      7\n"," |      >>> np.remainder.ntypes\n"," |      14\n"," |  \n"," |  signature\n"," |      Definition of the core elements a generalized ufunc operates on.\n"," |      \n"," |      The signature determines how the dimensions of each input/output array\n"," |      are split into core and loop dimensions:\n"," |      \n"," |      1. Each dimension in the signature is matched to a dimension of the\n"," |         corresponding passed-in array, starting from the end of the shape tuple.\n"," |      2. Core dimensions assigned to the same label in the signature must have\n"," |         exactly matching sizes, no broadcasting is performed.\n"," |      3. The core dimensions are removed from all inputs and the remaining\n"," |         dimensions are broadcast together, defining the loop dimensions.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      Generalized ufuncs are used internally in many linalg functions, and in\n"," |      the testing suite; the examples below are taken from these.\n"," |      For ufuncs that operate on scalars, the signature is None, which is\n"," |      equivalent to '()' for every argument.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.core.umath_tests.matrix_multiply.signature\n"," |      '(m,n),(n,p)->(m,p)'\n"," |      >>> np.linalg._umath_linalg.det.signature\n"," |      '(m,m)->()'\n"," |      >>> np.add.signature is None\n"," |      True  # equivalent to '(),()->()'\n"," |  \n"," |  types\n"," |      Returns a list with types grouped input->output.\n"," |      \n"," |      Data attribute listing the data-type \"Domain-Range\" groupings the ufunc can\n"," |      deliver. The data-types are given using the character codes.\n"," |      \n"," |      See Also\n"," |      --------\n"," |      numpy.ufunc.ntypes\n"," |      \n"," |      Examples\n"," |      --------\n"," |      >>> np.add.types\n"," |      ['??->?', 'bb->b', 'BB->B', 'hh->h', 'HH->H', 'ii->i', 'II->I', 'll->l',\n"," |      'LL->L', 'qq->q', 'QQ->Q', 'ff->f', 'dd->d', 'gg->g', 'FF->F', 'DD->D',\n"," |      'GG->G', 'OO->O']\n"," |      \n"," |      >>> np.multiply.types\n"," |      ['??->?', 'bb->b', 'BB->B', 'hh->h', 'HH->H', 'ii->i', 'II->I', 'll->l',\n"," |      'LL->L', 'qq->q', 'QQ->Q', 'ff->f', 'dd->d', 'gg->g', 'FF->F', 'DD->D',\n"," |      'GG->G', 'OO->O']\n"," |      \n"," |      >>> np.power.types\n"," |      ['bb->b', 'BB->B', 'hh->h', 'HH->H', 'ii->i', 'II->I', 'll->l', 'LL->L',\n"," |      'qq->q', 'QQ->Q', 'ff->f', 'dd->d', 'gg->g', 'FF->F', 'DD->D', 'GG->G',\n"," |      'OO->O']\n"," |      \n"," |      >>> np.exp.types\n"," |      ['f->f', 'd->d', 'g->g', 'F->F', 'D->D', 'G->G', 'O->O']\n"," |      \n"," |      >>> np.remainder.types\n"," |      ['bb->b', 'BB->B', 'hh->h', 'HH->H', 'ii->i', 'II->I', 'll->l', 'LL->L',\n"," |      'qq->q', 'QQ->Q', 'ff->f', 'dd->d', 'gg->g', 'OO->O']\n","\n"]}]},{"cell_type":"code","source":["'''Create a null vector of size 10 but the fifth value which is 11\n","'''\n","import numpy as np\n","\n","null_vector = np.zeros(10)\n","null_vector[4] = 11\n","print(null_vector)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wp5SmxcVTnKW","executionInfo":{"status":"ok","timestamp":1676132956916,"user_tz":0,"elapsed":461,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"6052a2e5-db34-4ff3-ddd3-4e0667c95a6f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 0.  0.  0.  0. 11.  0.  0.  0.  0.  0.]\n"]}]},{"cell_type":"code","source":["'''Create a vector with values ranging from 15 to 69 python code'''\n","import numpy as np\n","\n","vector = np.arange(15, 70)\n","print(vector)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hA683BPiTz_2","executionInfo":{"status":"ok","timestamp":1676133016126,"user_tz":0,"elapsed":711,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"4b26992d-74ef-4263-de7f-6e95e3761cf7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\n"," 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\n"," 63 64 65 66 67 68 69]\n"]}]},{"cell_type":"code","source":["'''Reverse a vector (first element becomes last)'''\n","import numpy as np\n","\n","vector = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n","reversed_vector = vector[::-1]\n","print(reversed_vector)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fV0FbP58UEzf","executionInfo":{"status":"ok","timestamp":1676133080577,"user_tz":0,"elapsed":3,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"88bb54ec-d2a3-451d-d53b-dda6511b0ced"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[10  9  8  7  6  5  4  3  2  1]\n"]}]},{"cell_type":"code","source":["'''Create a 3x3 matrix with values ranging from 0 to 8\n","'''\n","import numpy as np\n","\n","matrix = np.arange(0, 9).reshape(3, 3)\n","print(matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LGxDT0v5UUYy","executionInfo":{"status":"ok","timestamp":1676133176208,"user_tz":0,"elapsed":813,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"cefce7ae-e420-49a9-a53f-c1e5fcf96506"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 1 2]\n"," [3 4 5]\n"," [6 7 8]]\n"]}]},{"cell_type":"code","source":["'''Find indices of non-zero elements from [1,2,0,0,4,0]\n","'''\n","import numpy as np\n","\n","array = np.array([1, 2, 0, 0, 4, 0])\n","non_zero_indices = np.nonzero(array)\n","print(non_zero_indices)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PbQi8sVuUpG6","executionInfo":{"status":"ok","timestamp":1676133221879,"user_tz":0,"elapsed":467,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"14f540c6-f015-49e4-8b30-1303aced0055"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(array([0, 1, 4]),)\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","identity_matrix = np.eye(5)\n","print(identity_matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l3by52chU0-L","executionInfo":{"status":"ok","timestamp":1676435672798,"user_tz":-330,"elapsed":8,"user":{"displayName":"praseed shanmughan","userId":"17112146405014747885"}},"outputId":"479b1651-c7a7-4b76-f7bc-8f0791f122e6"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1. 0. 0. 0. 0.]\n"," [0. 1. 0. 0. 0.]\n"," [0. 0. 1. 0. 0.]\n"," [0. 0. 0. 1. 0.]\n"," [0. 0. 0. 0. 1.]]\n"]}]},{"cell_type":"code","source":["'''Create a 3x3x3 array with random values'''\n","import numpy as np\n","\n","random_array = np.random.random((3, 3, 3))\n","print(random_array)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hxtP0QVeVAFC","executionInfo":{"status":"ok","timestamp":1676133320581,"user_tz":0,"elapsed":684,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"1e04445b-d264-4bb1-be9b-afa049267ca2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[[0.56703699 0.21552894 0.85556823]\n","  [0.09796734 0.12074027 0.90702425]\n","  [0.35834062 0.38854216 0.36731807]]\n","\n"," [[0.09201859 0.09583609 0.49952979]\n","  [0.26104173 0.40371184 0.85689061]\n","  [0.45815685 0.70568023 0.78330604]]\n","\n"," [[0.22879096 0.89983066 0.39436276]\n","  [0.63909986 0.44422446 0.71809571]\n","  [0.79019318 0.86445783 0.20980555]]]\n"]}]},{"cell_type":"code","source":["'''Create a 10x10 array with random values and find the minimum and \n","maximum values '''\n","import numpy as np\n","\n","random_array = np.random.random((10, 10))\n","print(\"Random Array: \\n\", random_array)\n","\n","min_value = np.min(random_array)\n","max_value = np.max(random_array)\n","\n","print(\"Minimum Value:\", min_value)\n","print(\"Maximum Value:\", max_value)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_zcOaBwwVNdt","executionInfo":{"status":"ok","timestamp":1676133424439,"user_tz":0,"elapsed":3,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"f2175316-6730-4b15-bb60-579a17bd02aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Array: \n"," [[0.30048298 0.05365121 0.69973422 0.85685387 0.99325272 0.25286516\n","  0.08176489 0.1685649  0.68405455 0.89553112]\n"," [0.33329072 0.06657307 0.93794059 0.1237457  0.23298831 0.58233442\n","  0.42102472 0.28471822 0.58491695 0.17369593]\n"," [0.66399273 0.69754073 0.35083248 0.03706    0.1111755  0.59360591\n","  0.69609715 0.13729397 0.4157119  0.41626809]\n"," [0.48270114 0.0628059  0.94423082 0.70815519 0.88265465 0.93800537\n","  0.05364264 0.57024732 0.00674486 0.88215177]\n"," [0.03199947 0.35333631 0.20040008 0.41178136 0.89035577 0.47520592\n","  0.66007443 0.0545264  0.6013351  0.89038459]\n"," [0.83406975 0.90085433 0.72602923 0.33304338 0.8426048  0.04813049\n","  0.88696394 0.45161635 0.36402381 0.70726291]\n"," [0.04023921 0.62035701 0.49255213 0.444464   0.2241991  0.57244538\n","  0.84980908 0.90831707 0.61415504 0.32132059]\n"," [0.22126556 0.25044899 0.57767166 0.56329969 0.09857014 0.16402351\n","  0.60550824 0.11496016 0.752593   0.43082544]\n"," [0.45711759 0.27317794 0.34052895 0.35866602 0.0804199  0.7764516\n","  0.19863491 0.21261016 0.31859511 0.15494315]\n"," [0.85738255 0.10663861 0.72736737 0.51526279 0.96834586 0.35509411\n","  0.90419099 0.00963822 0.6021136  0.88121021]]\n","Minimum Value: 0.00674485890906773\n","Maximum Value: 0.993252722614431\n"]}]},{"cell_type":"code","source":["'''Create a random vector of size 30 and find the mean value\n","'''\n","import numpy as np\n","\n","random_vector = np.random.rand(30)\n","print(\"Random Vector: \\n\", random_vector)\n","\n","mean_value = np.mean(random_vector)\n","\n","print(\"Mean Value:\", mean_value)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"puvUiTvaVml0","executionInfo":{"status":"ok","timestamp":1676133473253,"user_tz":0,"elapsed":556,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"ece0344e-dd47-49ae-a592-a7bc1c5b5ae7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random Vector: \n"," [0.21434211 0.15150498 0.04098235 0.3516141  0.39519237 0.21462156\n"," 0.9179753  0.80504836 0.82417883 0.41289135 0.43896116 0.26951293\n"," 0.13228766 0.0597582  0.40082966 0.15182264 0.12244786 0.85855938\n"," 0.74866894 0.77846558 0.92984783 0.80708934 0.82786398 0.01023705\n"," 0.63585848 0.24565618 0.1637234  0.15969024 0.47305395 0.08762543]\n","Mean Value: 0.4210103737735069\n"]}]},{"cell_type":"code","source":["'''Create a 2d array with 1 on the border and 0 insid'''\n","import numpy as np\n","\n","n = 5\n","m = 5\n","\n","array = np.ones((n, m))\n","array[1:-1, 1:-1] = 0\n","\n","print(\"2D Array with 1 on Border and 0 Inside: \\n\", array)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"buCWiUYoVyW1","executionInfo":{"status":"ok","timestamp":1676133520912,"user_tz":0,"elapsed":2,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"bdcc0030-2934-4729-cde7-2d9df6e5244a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2D Array with 1 on Border and 0 Inside: \n"," [[1. 1. 1. 1. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 1. 1. 1. 1.]]\n"]}]},{"cell_type":"code","source":["'''Consider an array Z = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], how to \n","generate an array R = [[1,2,3,4], [2,3,4,5], [3,4,5,6], ..., \n","[11,12,13,14]]'''\n","import numpy as np\n","\n","Z = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n","\n","R = np.stack([Z[i:i+4] for i in range(len(Z)-3)])\n","\n","print(\"Array R: \\n\", R)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4glpyXPqV9Ni","executionInfo":{"status":"ok","timestamp":1676133648457,"user_tz":0,"elapsed":543,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"6799598a-0e8c-4ff9-ba42-99887cbef264"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Array R: \n"," [[ 1  2  3  4]\n"," [ 2  3  4  5]\n"," [ 3  4  5  6]\n"," [ 4  5  6  7]\n"," [ 5  6  7  8]\n"," [ 6  7  8  9]\n"," [ 7  8  9 10]\n"," [ 8  9 10 11]\n"," [ 9 10 11 12]\n"," [10 11 12 13]\n"," [11 12 13 14]]\n"]}]},{"cell_type":"code","source":["'''How to get the n largest values of an array'''\n","import numpy as np\n","\n","def get_n_largest_values(arr, n):\n","    # sort the array in descending order\n","    sorted_arr = np.sort(arr)[::-1]\n","    # return the first n elements\n","    return sorted_arr[:n]\n","\n","# test with an array\n","arr = np.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])\n","n = 3\n","print(get_n_largest_values(arr, n))\n","# Output: [9, 6, 5]\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NJ8dj2YkWmLY","executionInfo":{"status":"ok","timestamp":1676134090783,"user_tz":0,"elapsed":349,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"6727441d-2269-4521-d51d-2d09fa53d0ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[9 6 5]\n"]}]},{"cell_type":"code","source":["''' Consider 2 sets of points P0,P1 describing lines (2d) and a set of \n","points P, how to compute distance from each point j (P[j]) to each \n","line i (P0[i],P1[i])?'''\n","import numpy as np\n","\n","def distance_point_to_line(P0, P1, P):\n","    n = P0.shape[0]\n","    m = P.shape[0]\n","    distances = np.zeros((n, m))\n","    for i in range(n):\n","        v = P1[i] - P0[i]\n","        for j in range(m):\n","            w = P[j] - P0[i]\n","            c1 = np.dot(w, v)\n","            c2 = np.dot(v, v)\n","            b = c1 / c2\n","            Pb = P0[i] + b * v\n","            distances[i, j] = np.linalg.norm(P[j] - Pb)\n","            return distances\n","'''some errors occur skip this questions i will uploadcrt one'''"],"metadata":{"id":"O-1u_CnsYJQ9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''How to get the dates of yesterday, today and tomorrow?'''\n","import datetime\n","\n","def get_dates():\n","    today = datetime.datetime.now().date()\n","    yesterday = today - datetime.timedelta(days=1)\n","    tomorrow = today + datetime.timedelta(days=1)\n","    return yesterday, today, tomorrow\n","\n","yesterday, today, tomorrow = get_dates()\n","print(\"Yesterday:\", yesterday)\n","print(\"Today:\", today)\n","print(\"Tomorrow:\", tomorrow)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GNdc8NS3Y8xe","executionInfo":{"status":"ok","timestamp":1676134380384,"user_tz":0,"elapsed":5,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"201b4e1f-dbf2-42dd-dd47-44164f2ecf92"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Yesterday: 2023-02-10\n","Today: 2023-02-11\n","Tomorrow: 2023-02-12\n"]}]},{"cell_type":"code","source":["'''Create a vector of size 10 with values ranging from 0 to 1, both \n","excluded '''\n","import numpy as np\n","\n","vector = np.linspace(0, 1, 10, endpoint=False)\n","print(vector)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3oYA-ngsZPMs","executionInfo":{"status":"ok","timestamp":1676134443894,"user_tz":0,"elapsed":793,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"85dfbfcc-a667-44c6-84c3-865c997875b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]\n"]}]},{"cell_type":"code","source":["'''How to sum a small array faster than np.sum?\n","'''\n","array = [1, 2, 3, 4, 5]\n","result = sum(array)\n","print(result)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"45awKmTrZfaF","executionInfo":{"status":"ok","timestamp":1676134530779,"user_tz":0,"elapsed":738,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"28c72c9c-1488-41f3-e5ad-f4fd5a5bd00c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15\n"]}]},{"cell_type":"code","source":["'''Make an array immutable (read-only)'''\n","array = [1, 2, 3, 4, 5]\n","immutable_array = tuple(array)\n","print(array)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G14nRRtCZ2ju","executionInfo":{"status":"ok","timestamp":1676134620363,"user_tz":0,"elapsed":494,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"4e8c0bd6-902f-4da8-9536-bf7bd50e2d11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5]\n"]}]},{"cell_type":"code","source":["'''How to find common values between two arrays?'''\n","array1 = [1, 2, 3, 4, 5]\n","array2 = [3, 4, 5, 6, 7]\n","\n","common_values = set(array1) & set(array2)\n","print(common_values)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-z_eo9jJZ_eQ","executionInfo":{"status":"ok","timestamp":1676134712043,"user_tz":0,"elapsed":714,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"848947f6-e94e-46f2-b75b-af39d13e0a33"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{3, 4, 5}\n"]}]},{"cell_type":"code","source":["'''How to round away from zero a float array ?'''\n","import numpy as np\n","\n","array = np.array([-1.7, -0.2, 0.2, 1.7])\n","rounded_array = np.copysign(np.ceil(np.abs(array)), array)\n","print(rounded_array)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CSMSa1VpanMD","executionInfo":{"status":"ok","timestamp":1676134794028,"user_tz":0,"elapsed":544,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"71ecf68c-f58e-4707-9468-a325fccd36dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[-2. -1.  1.  2.]\n"]}]},{"cell_type":"code","source":["'''Extract the integer part of a random array of positive numbers \n","using 4 different methods '''\n","import numpy as np\n","\n","array = np.random.rand(10)\n","int_part = np.floor(array)\n","print(int_part)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fdJfpR84a0RJ","executionInfo":{"status":"ok","timestamp":1676134848352,"user_tz":0,"elapsed":4,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"a2b73446-8619-4de4-f6cf-48c66247613a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"]}]},{"cell_type":"code","source":["'''Given two arrays, X and Y, construct the Cauchy matrix C (Cij \n","=1/(xi - yj))'''\n","import numpy as np\n","\n","X = np.array([1, 2, 3, 4])\n","Y = np.array([5, 6, 7, 8])\n","\n","n = len(X)\n","m = len(Y)\n","C = np.zeros((n, m))\n","for i in range(n):\n","    for j in range(m):\n","        C[i, j] = 1 / (X[i] - Y[j])\n","print(C)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KIeA95IxbHMv","executionInfo":{"status":"ok","timestamp":1676134957961,"user_tz":0,"elapsed":727,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"b3d14f41-d84d-488e-b42c-7cc8dbccb265"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[-0.25       -0.2        -0.16666667 -0.14285714]\n"," [-0.33333333 -0.25       -0.2        -0.16666667]\n"," [-0.5        -0.33333333 -0.25       -0.2       ]\n"," [-1.         -0.5        -0.33333333 -0.25      ]]\n"]}]},{"cell_type":"code","source":["'''Create a 5x5 matrix with values 1,2,3,4 just below the diagonal'''\n","import numpy as np\n","\n","matrix = np.zeros((5, 5))\n","for i in range(1, 5):\n","    matrix[i, i-1] = i\n","print(matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_a6IUxs6bcKN","executionInfo":{"status":"ok","timestamp":1676135000120,"user_tz":0,"elapsed":503,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"61202a49-4d3e-4dec-d6d9-2ef065e5022f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0. 0. 0. 0. 0.]\n"," [1. 0. 0. 0. 0.]\n"," [0. 2. 0. 0. 0.]\n"," [0. 0. 3. 0. 0.]\n"," [0. 0. 0. 4. 0.]]\n"]}]},{"cell_type":"code","source":["'''Create a 8x8 matrix and fill it with a checkerboard pattern\n","'''\n","import numpy as np\n","\n","matrix = np.zeros((8, 8), dtype=int)\n","for i in range(8):\n","    for j in range(8):\n","        if (i+j) % 2 == 0:\n","            matrix[i, j] = 1\n","print(matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oe2Bml3qboGp","executionInfo":{"status":"ok","timestamp":1676135040530,"user_tz":0,"elapsed":3,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"c11a485f-4f23-44ed-eac5-55374cda1a15"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]]\n"]}]},{"cell_type":"code","source":["'''Consider a (6,7,8) shape array, what is the index (x,y,z) of the \n","100th element?'''\n","import numpy as np\n","\n","array = np.arange(6 * 7 * 8).reshape(6, 7, 8)\n","index = np.unravel_index(99, (6, 7, 8))\n","print(index)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vc7UiSfPbx3m","executionInfo":{"status":"ok","timestamp":1676135089240,"user_tz":0,"elapsed":3,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"0ece2fd1-d0ef-4c23-c3cd-04fbb3bc6e87"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 5, 3)\n"]}]},{"cell_type":"code","source":["'''Normalize a 5x5 random matrix'''\n","import numpy as np\n","\n","matrix = np.random.rand(5, 5)\n","matrix_normalized = (matrix - matrix.mean()) / matrix.std()\n","print(matrix_normalized)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rDH147A7b9DW","executionInfo":{"status":"ok","timestamp":1676135138493,"user_tz":0,"elapsed":352,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"47d39be7-0f78-4053-e482-cc315c189610"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1.54861821 -1.13072661  0.7977034   0.1368975  -1.27543196]\n"," [ 0.9861504  -0.51826847  0.01360932 -0.75359151 -0.23610041]\n"," [ 0.34639561  0.63429868  0.85500099  0.6213138   1.61328324]\n"," [-1.31173093 -1.41930369  1.61224019  0.18406117  0.5508084 ]\n"," [-1.6671982  -0.55399616 -1.44261236  0.91553634 -0.50695695]]\n"]}]},{"cell_type":"code","source":["'''. Create a custom dtype that describes a color as four unsigned bytes \n","(RGBA)'''\n","import numpy as np\n","\n","color_dtype = np.dtype([(\"R\", np.uint8), (\"G\", np.uint8), (\"B\", np.uint8), (\"A\", np.uint8)])\n","\n","color_dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tYw9Wmm2cE2P","executionInfo":{"status":"ok","timestamp":1676393067733,"user_tz":0,"elapsed":14,"user":{"displayName":"Mabasha","userId":"06023181675582212848"}},"outputId":"4ffaf0c5-a598-4fe1-974e-2e03d62440db"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype([('R', 'u1'), ('G', 'u1'), ('B', 'u1'), ('A', 'u1')])"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":[],"metadata":{"id":"-FnSsWpkboM4"},"execution_count":null,"outputs":[]}]}